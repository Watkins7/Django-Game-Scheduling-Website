# Generated by Django 4.0.3 on 2022-05-17 20:52

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.db.models.expressions
import django.utils.timezone
import pick_up_app.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('mmrScore', models.IntegerField(default=100)),
                ('teamname', models.CharField(default='', max_length=50)),
                ('email', models.EmailField(default='', max_length=100)),
                ('checkpassword', models.CharField(default='', max_length=50)),
                ('longitude', models.FloatField(default=-76.71)),
                ('latitude', models.FloatField(default=39.2543)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Games',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('game', pick_up_app.models.NameField(max_length=30, unique=True)),
                ('gameType', models.CharField(max_length=30)),
            ],
        ),
        migrations.CreateModel(
            name='TimeSlot',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('slot_start', models.DateTimeField(verbose_name='Start date/time available')),
                ('slot_end', models.DateTimeField(verbose_name='End date/time available')),
                ('host_won', models.BooleanField(null=True)),
                ('opponent_won', models.BooleanField(null=True)),
                ('game', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pick_up_app.games')),
                ('host_team', models.ForeignKey(default='', on_delete=django.db.models.deletion.CASCADE, related_name='host_team', to=settings.AUTH_USER_MODEL)),
                ('opponent_team', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='opponent_team', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Emails',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email', models.EmailField(max_length=254)),
                ('is_captain', models.BooleanField()),
                ('team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddConstraint(
            model_name='timeslot',
            constraint=models.UniqueConstraint(fields=('host_team', 'slot_start', 'slot_end'), name='pick_up_app_timeslot_unique_team_slot'),
        ),
        migrations.AddConstraint(
            model_name='timeslot',
            constraint=models.CheckConstraint(check=models.Q(('slot_start__lte', django.db.models.expressions.F('slot_end'))), name='pick_up_app_timeslot_slotstart_lte_slotend'),
        ),
        migrations.AddConstraint(
            model_name='emails',
            constraint=models.UniqueConstraint(condition=models.Q(('is_captain', True)), fields=('team',), name='One_Captain_Per_Team'),
        ),
    ]
